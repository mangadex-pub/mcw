name: "BuildTestPublish"

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
    paths-ignore: [ "README.md" ]
  workflow_dispatch: { }

env:
  JAVA_VERSION: "23"

jobs:
  set_variables:
    name: "Set build variables"
    runs-on: "ubuntu-latest"
    outputs:
      build_version: "${{ steps.set_variables.outputs.build_version }}"
      image_version_short: "${{ steps.set_variables.outputs.image_version_short }}"
      java_version: "${{ steps.set_variables.outputs.java_version  }}"
      docker_image: "${{ steps.set_variables.outputs.docker_image  }}"
    steps:
      - id: "set_variables"
        run: |
          set -euo pipefail

          echo "Setting workflow variables..."

          IMAGE_VERSION_SHORT="jdk-${{ env.JAVA_VERSION }}.git-$(echo "$GITHUB_SHA" | head -c 7)"
          echo "image_version_short=$IMAGE_VERSION_SHORT" | tee -a "$GITHUB_OUTPUT"
          BUILD_VERSION="$IMAGE_VERSION_SHORT.build-$(date +'%Y%m%d%H%M')"
          echo "build_version=$BUILD_VERSION" | tee -a "$GITHUB_OUTPUT"
          JAVA_VERSION="$(echo "${{ env.JAVA_VERSION }}" | grep -E "^[0-9]+$")"
          echo "java_version=$JAVA_VERSION"   | tee -a "$GITHUB_OUTPUT"
          DOCKER_IMAGE="$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')"
          echo "docker_image=$DOCKER_IMAGE"   | tee -a "$GITHUB_OUTPUT"

  dependency_report:
    name: "OWASP DepCheck"
    runs-on: "ubuntu-latest"
    needs: [ "set_variables" ]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          persist-credentials: false
      - name: "Install JDK"
        uses: "actions/setup-java@v4"
        with:
          distribution: "corretto"
          java-version: "${{ needs.set_variables.outputs.java_version }}"
      - name: "Cache Maven repository"
        uses: "actions/cache@v4"
        with:
          path: "${{ github.workspace }}/.ci/transient/m2-repo"
          key: "${{ runner.os }}-${{ runner.arch }}-owasp-${{ hashFiles('pom.xml') }}"
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-owasp-
      - name: "Maven Build"
        uses: "./.github/actions/maven-build"
        with:
          BUILD_REVISION: "${{ needs.set_variables.outputs.build_version }}"
          MAVEN_JOB_ARGS: "dependency-check:check -DnvdApiKey=${{ secrets.NVD_API_KEY }}"
          JVMOPT_NATIVE_ACCESS: "ALL-UNNAMED"
      - name: "Archive jarfile"
        uses: "actions/upload-artifact@v4"
        with:
          name: "dependency-check-report.html"
          path: "target/dependency-check-report.html"

  build_hotspot:
    name: "Build (HotSpot)"
    runs-on: "ubuntu-latest"
    needs: [ "set_variables" ]
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          persist-credentials: false
      - name: "Install JDK"
        uses: "actions/setup-java@v4"
        with:
          distribution: "corretto"
          java-version: "${{ needs.set_variables.outputs.java_version }}"
      - name: "Cache Maven repository"
        uses: "actions/cache@v4"
        with:
          path: "${{ github.workspace }}/.ci/transient/m2-repo"
          key: "${{ runner.os }}-${{ runner.arch }}-hostpot-${{ hashFiles('pom.xml') }}"
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-hotspot-
      - name: "Maven Build"
        uses: "./.github/actions/maven-build"
        with:
          BUILD_REVISION: "${{ needs.set_variables.outputs.build_version }}"
          MAVEN_JOB_ARGS: "verify package"
      - name: "Archive jarfile"
        uses: "actions/upload-artifact@v4"
        with:
          name: "mcw.jar"
          path: "target/mcw.jar"

  publish_hotspot:
    name: "Publish (HotSpot)"
    needs: [ "set_variables", "build_hotspot" ]
    uses: "./.github/workflows/publish.yml"
    with:
      JAVA_VERSION: "${{ needs.set_variables.outputs.java_version }}"
      ARTIFACT_NAME: "mcw.jar"
      DOCKER_REGISTRY: "ghcr.io"
      DOCKER_IMAGE: "${{ needs.set_variables.outputs.docker_image }}"
      DOCKER_TARGET: "hotspot"
      DOCKER_TAG_CANONICAL: "${{ needs.set_variables.outputs.build_version }}-hotspot"
      DOCKER_TAG_SHORT: "${{ needs.set_variables.outputs.image_version_short }}"

  build_graal:
    name: "Build (GraalVM)"
    runs-on: "ubuntu-latest"
    needs: [ "set_variables", "build_hotspot" ]
    container:
      image: "ghcr.io/mangadex-pub/jdk-maven:${{ needs.set_variables.outputs.java_version }}-graal"
      options: "--user root"
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4"
        with:
          persist-credentials: false
      - name: "Cache Maven repository"
        uses: "actions/cache@v4"
        with:
          path: "${{ github.workspace }}/.ci/transient/m2-repo"
          key: "${{ runner.os }}-${{ runner.arch }}-graal-${{ hashFiles('pom.xml') }}"
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-graal-
      - name: "Maven Build"
        uses: "./.github/actions/maven-build"
        with:
          BUILD_REVISION: "${{ needs.set_variables.outputs.build_version }}"
          MAVEN_JOB_ARGS: "package -Pnative -DskipTests"
      - name: "Archive binary"
        uses: "actions/upload-artifact@v4"
        with:
          name: "mcw-aot"
          path: "target/mcw"
      - name: "Archive build report"
        uses: "actions/upload-artifact@v4"
        with:
          name: "mcw-aot-build-report.html"
          path: "target/mcw-build-report.html"

  publish_graal:
    name: "Publish (GraalVM)"
    needs: [ "set_variables", "build_graal" ]
    uses: "./.github/workflows/publish.yml"
    with:
      JAVA_VERSION: "${{ needs.set_variables.outputs.java_version }}"
      ARTIFACT_NAME: "mcw-aot"
      DOCKER_REGISTRY: "ghcr.io"
      DOCKER_IMAGE: "${{ needs.set_variables.outputs.docker_image }}"
      DOCKER_TARGET: "graal"
      DOCKER_TAG_CANONICAL: "${{ needs.set_variables.outputs.build_version }}-hotspot"
      DOCKER_TAG_SHORT: "${{ needs.set_variables.outputs.image_version_short }}"
